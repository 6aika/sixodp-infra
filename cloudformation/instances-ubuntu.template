AWSTemplateFormatVersion: "2010-09-09"
Description: sixodp docker infrastructure ubuntu

Parameters:
  CustomerName:
    Type: String
    Default: generic
  EnvironmentName:
    Type: String
    Default: infratest
    AllowedValues:
      - infratest
      - dev
      - qa
      - prod
  InstanceType:
    Description: EC2 instance type for the application servers
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: "Must be one of the following EC2 instance types: t2.micro, t2.small, t2.medium"
  DatabaseSecurityGroup:
    Description: Security group of the RDS database
    Type: AWS::EC2::SecurityGroup::Id
    MinLength: 1
  InstanceRole:
    Description: Instance Role of the EC2 instance
    Type: String
    MinLength: 1
    AllowedValues:
      - sixodp-generic-qa-instance 
      - sixodp-docker-instance-role
      - sixodp-omni-instance
  HostedZoneId:
    Description: Zone ID for the DNS record
    Type: AWS::Route53::HostedZone::Id
    Default: Z3MUEH1DAIWOFS
    MinLength: 1
  WhitelistedIpAddress:
    Type: String
    Default: 193.64.225.83/32
    MinLength: 1

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-ed82e39e # Ubuntu Server 14.04 LTS (HVM), SSD Volume Type
      KeyName: sixodp-omni
      IamInstanceProfile: !Ref InstanceRole
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 20
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Sub sixodp-${CustomerName}-${EnvironmentName}
      UserData:
        !Base64 |
          #!/bin/bash

          apt-get update
          apt-get -y dist-upgrade
          apt-get -y install libssl-dev libffi-dev python-dev python-pip git
          pip install awscli ansible markupsafe docker-py==1.9.0

          cd /root
          git clone https://github.com/6aika/sixodp-infra.git
          git clone https://github.com/6aika/sixodp.git

          cd /root/sixodp-infra/bootstrap
          ansible-playbook -i localhost, deploy.yml

          cd /root/sixodp
          git submodule update --init --recursive

          aws s3 cp s3://sixodp-secrets/generic/qa/secrets.yml /root/sixodp/ansible/vars/sixodp-secrets/generic/qa/secrets.yml
          chmod -R go-rwx /root/sixodp/ansible/vars/sixodp-secrets/*

          cd /root/sixodp/ansible
          ansible-playbook -i inventories/qa deploy-transitional.yml

          echo "Bootstrap done."

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP
      SecurityGroupIngress: 
        - FromPort: 22
          ToPort: 22
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddress
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddress
        - FromPort: 443
          ToPort: 443
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddress
        - FromPort: 8983
          ToPort: 8983
          IpProtocol: tcp
          CidrIp: !Ref WhitelistedIpAddress

  DatabaseIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      GroupId: !Ref DatabaseSecurityGroup
      SourceSecurityGroupName: !Ref InstanceSecurityGroup

  ElasticAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance

  DomainName:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub ${CustomerName}-${EnvironmentName}.dataportaali.com.
      Type: A
      TTL: 300
      HostedZoneId: !Ref HostedZoneId
      ResourceRecords:
        - !Ref ElasticAddress

Outputs:
  InstanceId:
    Value: !Ref EC2Instance
  PublicDNS:
    Value: !GetAtt EC2Instance.PublicDnsName
  AZ:
    Value: !GetAtt EC2Instance.AvailabilityZone
  PublicIP:
    Value: !GetAtt EC2Instance.PublicIp
